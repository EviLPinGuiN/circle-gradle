package gui;

import api.ApiClient;
import io.reactivex.schedulers.Schedulers;
import model.GithubUserHolder;
import model.UserHolder;

import javax.swing.*;
import java.awt.*;

public class TokenSettingsGUI  {
    private JPanel rootPanel;
    private JTextField tokenText;
    private JButton testButton;
    private JLabel testText;
    private JLabel label;
    final StaticComponents stat = StaticComponents.getInstance();

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    TokenSettingsGUI() {
        createUIComponents();
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }

    public JTextField getTextField1() {
        return tokenText;
    }
    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
//        rootPanel = new JPanel();
//       rootPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
//        rootPanel.setRequestFocusEnabled(true);
//        rootPanel.add(textField1);

    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        if(stat.getToken()!=null){
            tokenText.setText(stat.getToken());
            checkToken();
        }
        testButton.addActionListener(e -> {
            stat.setToken(tokenText.getText());
            checkToken();
        });
    }

    private void checkToken(){
        ApiClient.getPhraseService()
                .getProfile()
                .map(UserHolder::getGithubUserHolder)
                .map(GithubUserHolder::getGithubUser)
                .subscribeOn(Schedulers.io())
                .subscribe(githubUser -> {
                    String login = githubUser.getLogin();
                    testText.setText("Success! You logged as " + login);
                    testText.setForeground(Color.decode("#4CAF50"));
                }, error ->{
                    testText.setText("Error! Please, check your token.");
                    testText.setForeground(Color.RED);
                });
    }

}
